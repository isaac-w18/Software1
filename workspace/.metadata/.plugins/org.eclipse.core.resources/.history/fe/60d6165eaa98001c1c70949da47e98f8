import components.naturalnumber.NaturalNumber;
import components.naturalnumber.NaturalNumber2;
import components.simplereader.SimpleReader;
import components.simplereader.SimpleReader1L;
import components.simplewriter.SimpleWriter;
import components.simplewriter.SimpleWriter1L;

/**
 * Put a short phrase describing the program here.
 *
 * @author Isaac Frank
 *
 */
public final class HomeworkReview {

    /**
     * Private constructor so this utility class cannot be instantiated.
     */
    private HomeworkReview() {
    }

    /**
     * Tests if x, y, and z are all equal to each other.
     *
     * @param x
     *            any integer
     *
     * @param y
     *            any integer
     *
     * @param z
     *            any integer
     *
     * @return true if x, y, z are equal and false otherwise
     */
    private static boolean allTheSame(int x, int y, int z) {
        return x == y && y == z;
    }

    /**
     * Tests if x, y, and z are all different each other.
     *
     * @param x
     *            any integer
     *
     * @param y
     *            any integer
     *
     * @param z
     *            any integer
     *
     * @return true if x, y, z have no equalities and false otherwise
     */
    private static boolean allDifferent(int x, int y, int z) {
        return x != y && y != z && x != z;
    }

    /**
     * Tests if x, y, and z are all sorted in ascending order.
     *
     * @param x
     *            any integer
     *
     * @param y
     *            any integer
     *
     * @param z
     *            any integer
     *
     * @return true if x, y, z are in ascending order and false otherwise
     */
    private static boolean sorted(int x, int y, int z) {
        return x <= y && y <= z;
    }

    /**
     * Swaps the two given {@code NaturalNumber}s.
     *
     * @param n1
     *            the first {@code NaturalNumber}
     * @param n2
     *            the second {@code NaturalNumber}
     * @updates n1
     * @updates n2
     * @ensures n1 = #n2 and n2 = #n1
     */
    private static void swapNN(NaturalNumber n1, NaturalNumber n2) {
        NaturalNumber tmp = new NaturalNumber2(n2);
        n1.transferFrom(n2);
        n2.transferFrom(tmp);
    }

    /**
     * Squares a given {@code NaturalNumber}.
     *
     * @param n
     *            the number to square
     * @updates n
     * @ensures n = #n * #n
     */
    private static void square(NaturalNumber n) {
        n.multiply(new NaturalNumber2(n));
    }

    /**
     * Reverses a String.
     *
     * @ensures <pre>
     * {@code reversedString = rev(s)}
     * </pre>
     * @param s
     * @return rev(s)
     */
    private static String reversedString(String s) {
        if (s.length() > 0) {
            return reversedString(s.substring(1)) + s.charAt(0);
        }
        return s;
    }

    /**
     * Returns the number of digits of {@code n}.
     *
     * @param n
     *            {@code NaturalNumber} whose digits to count
     * @return the number of digits of {@code n}
     * @ensures numberOfDigits = [number of digits of n]
     */
    private static int numberOfDigits(NaturalNumber n) {
        NaturalNumber i = new NaturalNumber2(n);
        int digits = 0;
        if (!i.isZero()) {
            i.divideBy10();
            digits = numberOfDigits(i) + 1;
        }
        return digits;
    }

    /**
     * Returns the sum of the digits of {@code n}.
     *
     * @param n
     *            {@code NaturalNumber} whose digits to add
     * @return the sum of the digits of {@code n}
     * @ensures sumOfDigits = [sum of the digits of n]
     */
    private static int sumOfDigits(NaturalNumber n) {
        NaturalNumber i = new NaturalNumber2(n);
        int sum = i.divideBy10();
        if (!i.isZero()) {
            sum += sumOfDigits(i);
        }
        return sum;
    }

    /**
     * Returns the sum of the digits of {@code n}.
     *
     * @param n
     *            {@code NaturalNumber} whose digits to add
     * @return the sum of the digits of {@code n}
     * @ensures sumOfDigits = [sum of the digits of n]
     */
    private static NaturalNumber naturalSumOfDigits(NaturalNumber n) {
        NaturalNumber i = new NaturalNumber2(n);
        NaturalNumber sum = new NaturalNumber2(i.divideBy10());
        if (!i.isZero()) {
            sum.add(naturalSumOfDigits(i));
        }
        return sum;
    }

    /**
     * Divides {@code n} by 2.
     *
     * @param n
     *            {@code NaturalNumber} to be divided
     * @updates n
     * @ensures 2 * n <= #n < 2 * (n + 1)
     */
    private static void divideBy2(NaturalNumber n) {
        int digit = n.divideBy10();
        int previousDigit = n.divideBy10();
        n.multiplyBy10(previousDigit);
        if (!n.isZero()) {
            divideBy2(n);
        }
        if (previousDigit == 0 || previousDigit % 2 != 0) {
            n.multiplyBy10(digit / 2 + 5);
        } else {
            n.multiplyBy10(digit / 2);
        }
    }

    /**
     * Checks whether a {@code String} is a palindrome.
     *
     * @param s
     *            {@code String} to be checked
     * @return true if {@code s} is a palindrome, false otherwise
     * @ensures isPalindrome = (s = rev(s))
     */
    private static boolean isPalindrome(String s) {

        boolean palindrome = true;
        if (s.length() > 1) {
            palindrome = s.charAt(0) == (s.charAt(s.length() - 1));
            String temp = s.substring(1, s.length() - 1);
            if (palindrome) {
                palindrome = isPalindrome(temp);
            }
        }
        return palindrome;
    }

    /**
     * Main method.
     *
     * @param args
     *            the command line arguments
     */
    public static void main(String[] args) {
        SimpleReader in = new SimpleReader1L();
        SimpleWriter out = new SimpleWriter1L();

        NaturalNumber n = new NaturalNumber2(99);
        divideBy2(n);
        out.println(n);

        out.println(isPalindrome("racecar"));

        in.close();
        out.close();

    }

}
